// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LikeServiceMock is an autogenerated mock type for the LikeService type
type LikeServiceMock struct {
	mock.Mock
}

type LikeServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LikeServiceMock) EXPECT() *LikeServiceMock_Expecter {
	return &LikeServiceMock_Expecter{mock: &_m.Mock}
}

// CheckLike provides a mock function with given fields: ctx, userID, postID
func (_m *LikeServiceMock) CheckLike(ctx context.Context, userID string, postID string) (bool, error) {
	ret := _m.Called(ctx, userID, postID)

	if len(ret) == 0 {
		panic("no return value specified for CheckLike")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userID, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeServiceMock_CheckLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLike'
type LikeServiceMock_CheckLike_Call struct {
	*mock.Call
}

// CheckLike is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - postID string
func (_e *LikeServiceMock_Expecter) CheckLike(ctx interface{}, userID interface{}, postID interface{}) *LikeServiceMock_CheckLike_Call {
	return &LikeServiceMock_CheckLike_Call{Call: _e.mock.On("CheckLike", ctx, userID, postID)}
}

func (_c *LikeServiceMock_CheckLike_Call) Run(run func(ctx context.Context, userID string, postID string)) *LikeServiceMock_CheckLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LikeServiceMock_CheckLike_Call) Return(_a0 bool, _a1 error) *LikeServiceMock_CheckLike_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LikeServiceMock_CheckLike_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *LikeServiceMock_CheckLike_Call {
	_c.Call.Return(run)
	return _c
}

// CheckLikes provides a mock function with given fields: ctx, userID, postIDs
func (_m *LikeServiceMock) CheckLikes(ctx context.Context, userID string, postIDs []string) (map[string]bool, error) {
	ret := _m.Called(ctx, userID, postIDs)

	if len(ret) == 0 {
		panic("no return value specified for CheckLikes")
	}

	var r0 map[string]bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (map[string]bool, error)); ok {
		return rf(ctx, userID, postIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) map[string]bool); ok {
		r0 = rf(ctx, userID, postIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, userID, postIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeServiceMock_CheckLikes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLikes'
type LikeServiceMock_CheckLikes_Call struct {
	*mock.Call
}

// CheckLikes is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - postIDs []string
func (_e *LikeServiceMock_Expecter) CheckLikes(ctx interface{}, userID interface{}, postIDs interface{}) *LikeServiceMock_CheckLikes_Call {
	return &LikeServiceMock_CheckLikes_Call{Call: _e.mock.On("CheckLikes", ctx, userID, postIDs)}
}

func (_c *LikeServiceMock_CheckLikes_Call) Run(run func(ctx context.Context, userID string, postIDs []string)) *LikeServiceMock_CheckLikes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *LikeServiceMock_CheckLikes_Call) Return(_a0 map[string]bool, _a1 error) *LikeServiceMock_CheckLikes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LikeServiceMock_CheckLikes_Call) RunAndReturn(run func(context.Context, string, []string) (map[string]bool, error)) *LikeServiceMock_CheckLikes_Call {
	_c.Call.Return(run)
	return _c
}

// LikePost provides a mock function with given fields: ctx, userID, postID
func (_m *LikeServiceMock) LikePost(ctx context.Context, userID string, postID string) error {
	ret := _m.Called(ctx, userID, postID)

	if len(ret) == 0 {
		panic("no return value specified for LikePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeServiceMock_LikePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LikePost'
type LikeServiceMock_LikePost_Call struct {
	*mock.Call
}

// LikePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - postID string
func (_e *LikeServiceMock_Expecter) LikePost(ctx interface{}, userID interface{}, postID interface{}) *LikeServiceMock_LikePost_Call {
	return &LikeServiceMock_LikePost_Call{Call: _e.mock.On("LikePost", ctx, userID, postID)}
}

func (_c *LikeServiceMock_LikePost_Call) Run(run func(ctx context.Context, userID string, postID string)) *LikeServiceMock_LikePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LikeServiceMock_LikePost_Call) Return(_a0 error) *LikeServiceMock_LikePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LikeServiceMock_LikePost_Call) RunAndReturn(run func(context.Context, string, string) error) *LikeServiceMock_LikePost_Call {
	_c.Call.Return(run)
	return _c
}

// UnlikePost provides a mock function with given fields: ctx, userID, postID
func (_m *LikeServiceMock) UnlikePost(ctx context.Context, userID string, postID string) error {
	ret := _m.Called(ctx, userID, postID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeServiceMock_UnlikePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlikePost'
type LikeServiceMock_UnlikePost_Call struct {
	*mock.Call
}

// UnlikePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - postID string
func (_e *LikeServiceMock_Expecter) UnlikePost(ctx interface{}, userID interface{}, postID interface{}) *LikeServiceMock_UnlikePost_Call {
	return &LikeServiceMock_UnlikePost_Call{Call: _e.mock.On("UnlikePost", ctx, userID, postID)}
}

func (_c *LikeServiceMock_UnlikePost_Call) Run(run func(ctx context.Context, userID string, postID string)) *LikeServiceMock_UnlikePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LikeServiceMock_UnlikePost_Call) Return(_a0 error) *LikeServiceMock_UnlikePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LikeServiceMock_UnlikePost_Call) RunAndReturn(run func(context.Context, string, string) error) *LikeServiceMock_UnlikePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewLikeServiceMock creates a new instance of LikeServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeServiceMock {
	mock := &LikeServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
