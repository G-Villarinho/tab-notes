// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"
)

// SessionServiceMock is an autogenerated mock type for the SessionService type
type SessionServiceMock struct {
	mock.Mock
}

type SessionServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionServiceMock) EXPECT() *SessionServiceMock_Expecter {
	return &SessionServiceMock_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, userID, email
func (_m *SessionServiceMock) CreateSession(ctx context.Context, userID string, email string) (string, error) {
	ret := _m.Called(ctx, userID, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, userID, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, userID, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionServiceMock_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionServiceMock_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - email string
func (_e *SessionServiceMock_Expecter) CreateSession(ctx interface{}, userID interface{}, email interface{}) *SessionServiceMock_CreateSession_Call {
	return &SessionServiceMock_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userID, email)}
}

func (_c *SessionServiceMock_CreateSession_Call) Run(run func(ctx context.Context, userID string, email string)) *SessionServiceMock_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SessionServiceMock_CreateSession_Call) Return(_a0 string, _a1 error) *SessionServiceMock_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionServiceMock_CreateSession_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *SessionServiceMock_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSessions provides a mock function with given fields: ctx, userID, currentSessionID
func (_m *SessionServiceMock) GetUserSessions(ctx context.Context, userID string, currentSessionID string) ([]*models.SessionResponse, error) {
	ret := _m.Called(ctx, userID, currentSessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessions")
	}

	var r0 []*models.SessionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*models.SessionResponse, error)); ok {
		return rf(ctx, userID, currentSessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*models.SessionResponse); ok {
		r0 = rf(ctx, userID, currentSessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SessionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, currentSessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionServiceMock_GetUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSessions'
type SessionServiceMock_GetUserSessions_Call struct {
	*mock.Call
}

// GetUserSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - currentSessionID string
func (_e *SessionServiceMock_Expecter) GetUserSessions(ctx interface{}, userID interface{}, currentSessionID interface{}) *SessionServiceMock_GetUserSessions_Call {
	return &SessionServiceMock_GetUserSessions_Call{Call: _e.mock.On("GetUserSessions", ctx, userID, currentSessionID)}
}

func (_c *SessionServiceMock_GetUserSessions_Call) Run(run func(ctx context.Context, userID string, currentSessionID string)) *SessionServiceMock_GetUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SessionServiceMock_GetUserSessions_Call) Return(_a0 []*models.SessionResponse, _a1 error) *SessionServiceMock_GetUserSessions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionServiceMock_GetUserSessions_Call) RunAndReturn(run func(context.Context, string, string) ([]*models.SessionResponse, error)) *SessionServiceMock_GetUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// IsSessionRevoked provides a mock function with given fields: ctx, sessionId
func (_m *SessionServiceMock) IsSessionRevoked(ctx context.Context, sessionId string) (bool, error) {
	ret := _m.Called(ctx, sessionId)

	if len(ret) == 0 {
		panic("no return value specified for IsSessionRevoked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, sessionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, sessionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionServiceMock_IsSessionRevoked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSessionRevoked'
type SessionServiceMock_IsSessionRevoked_Call struct {
	*mock.Call
}

// IsSessionRevoked is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionId string
func (_e *SessionServiceMock_Expecter) IsSessionRevoked(ctx interface{}, sessionId interface{}) *SessionServiceMock_IsSessionRevoked_Call {
	return &SessionServiceMock_IsSessionRevoked_Call{Call: _e.mock.On("IsSessionRevoked", ctx, sessionId)}
}

func (_c *SessionServiceMock_IsSessionRevoked_Call) Run(run func(ctx context.Context, sessionId string)) *SessionServiceMock_IsSessionRevoked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionServiceMock_IsSessionRevoked_Call) Return(_a0 bool, _a1 error) *SessionServiceMock_IsSessionRevoked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionServiceMock_IsSessionRevoked_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *SessionServiceMock_IsSessionRevoked_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAllUserSessions provides a mock function with given fields: ctx, userID, currentSessionID, revokeCurrent
func (_m *SessionServiceMock) RevokeAllUserSessions(ctx context.Context, userID string, currentSessionID string, revokeCurrent bool) error {
	ret := _m.Called(ctx, userID, currentSessionID, revokeCurrent)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAllUserSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, userID, currentSessionID, revokeCurrent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionServiceMock_RevokeAllUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAllUserSessions'
type SessionServiceMock_RevokeAllUserSessions_Call struct {
	*mock.Call
}

// RevokeAllUserSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - currentSessionID string
//   - revokeCurrent bool
func (_e *SessionServiceMock_Expecter) RevokeAllUserSessions(ctx interface{}, userID interface{}, currentSessionID interface{}, revokeCurrent interface{}) *SessionServiceMock_RevokeAllUserSessions_Call {
	return &SessionServiceMock_RevokeAllUserSessions_Call{Call: _e.mock.On("RevokeAllUserSessions", ctx, userID, currentSessionID, revokeCurrent)}
}

func (_c *SessionServiceMock_RevokeAllUserSessions_Call) Run(run func(ctx context.Context, userID string, currentSessionID string, revokeCurrent bool)) *SessionServiceMock_RevokeAllUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *SessionServiceMock_RevokeAllUserSessions_Call) Return(_a0 error) *SessionServiceMock_RevokeAllUserSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionServiceMock_RevokeAllUserSessions_Call) RunAndReturn(run func(context.Context, string, string, bool) error) *SessionServiceMock_RevokeAllUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeSession provides a mock function with given fields: ctx, sessionId
func (_m *SessionServiceMock) RevokeSession(ctx context.Context, sessionId string) error {
	ret := _m.Called(ctx, sessionId)

	if len(ret) == 0 {
		panic("no return value specified for RevokeSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionServiceMock_RevokeSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeSession'
type SessionServiceMock_RevokeSession_Call struct {
	*mock.Call
}

// RevokeSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionId string
func (_e *SessionServiceMock_Expecter) RevokeSession(ctx interface{}, sessionId interface{}) *SessionServiceMock_RevokeSession_Call {
	return &SessionServiceMock_RevokeSession_Call{Call: _e.mock.On("RevokeSession", ctx, sessionId)}
}

func (_c *SessionServiceMock_RevokeSession_Call) Run(run func(ctx context.Context, sessionId string)) *SessionServiceMock_RevokeSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionServiceMock_RevokeSession_Call) Return(_a0 error) *SessionServiceMock_RevokeSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionServiceMock_RevokeSession_Call) RunAndReturn(run func(context.Context, string) error) *SessionServiceMock_RevokeSession_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeUserSession provides a mock function with given fields: ctx, userID, sessionID
func (_m *SessionServiceMock) RevokeUserSession(ctx context.Context, userID string, sessionID string) error {
	ret := _m.Called(ctx, userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeUserSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionServiceMock_RevokeUserSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeUserSession'
type SessionServiceMock_RevokeUserSession_Call struct {
	*mock.Call
}

// RevokeUserSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - sessionID string
func (_e *SessionServiceMock_Expecter) RevokeUserSession(ctx interface{}, userID interface{}, sessionID interface{}) *SessionServiceMock_RevokeUserSession_Call {
	return &SessionServiceMock_RevokeUserSession_Call{Call: _e.mock.On("RevokeUserSession", ctx, userID, sessionID)}
}

func (_c *SessionServiceMock_RevokeUserSession_Call) Run(run func(ctx context.Context, userID string, sessionID string)) *SessionServiceMock_RevokeUserSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SessionServiceMock_RevokeUserSession_Call) Return(_a0 error) *SessionServiceMock_RevokeUserSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionServiceMock_RevokeUserSession_Call) RunAndReturn(run func(context.Context, string, string) error) *SessionServiceMock_RevokeUserSession_Call {
	_c.Call.Return(run)
	return _c
}

// ValidSession provides a mock function with given fields: ctx, token
func (_m *SessionServiceMock) ValidSession(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidSession")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionServiceMock_ValidSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidSession'
type SessionServiceMock_ValidSession_Call struct {
	*mock.Call
}

// ValidSession is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *SessionServiceMock_Expecter) ValidSession(ctx interface{}, token interface{}) *SessionServiceMock_ValidSession_Call {
	return &SessionServiceMock_ValidSession_Call{Call: _e.mock.On("ValidSession", ctx, token)}
}

func (_c *SessionServiceMock_ValidSession_Call) Run(run func(ctx context.Context, token string)) *SessionServiceMock_ValidSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionServiceMock_ValidSession_Call) Return(_a0 string, _a1 error) *SessionServiceMock_ValidSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionServiceMock_ValidSession_Call) RunAndReturn(run func(context.Context, string) (string, error)) *SessionServiceMock_ValidSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionServiceMock creates a new instance of SessionServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionServiceMock {
	mock := &SessionServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
