// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryMock is an autogenerated mock type for the UserRepository type
type UserRepositoryMock struct {
	mock.Mock
}

type UserRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepositoryMock) EXPECT() *UserRepositoryMock_Expecter {
	return &UserRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepositoryMock) CreateUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepositoryMock_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepositoryMock_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *UserRepositoryMock_Expecter) CreateUser(ctx interface{}, user interface{}) *UserRepositoryMock_CreateUser_Call {
	return &UserRepositoryMock_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserRepositoryMock_CreateUser_Call) Run(run func(ctx context.Context, user *models.User)) *UserRepositoryMock_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *UserRepositoryMock_CreateUser_Call) Return(_a0 error) *UserRepositoryMock_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepositoryMock_CreateUser_Call) RunAndReturn(run func(context.Context, *models.User) error) *UserRepositoryMock_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepositoryMock) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserRepositoryMock_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepositoryMock_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *UserRepositoryMock_GetUserByEmail_Call {
	return &UserRepositoryMock_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *UserRepositoryMock_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepositoryMock_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepositoryMock_GetUserByEmail_Call) Return(_a0 *models.User, _a1 error) *UserRepositoryMock_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UserRepositoryMock_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserRepositoryMock) GetUserByID(ctx context.Context, id string) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserRepositoryMock_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UserRepositoryMock_Expecter) GetUserByID(ctx interface{}, id interface{}) *UserRepositoryMock_GetUserByID_Call {
	return &UserRepositoryMock_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *UserRepositoryMock_GetUserByID_Call) Run(run func(ctx context.Context, id string)) *UserRepositoryMock_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepositoryMock_GetUserByID_Call) Return(_a0 *models.User, _a1 error) *UserRepositoryMock_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UserRepositoryMock_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepositoryMock) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type UserRepositoryMock_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserRepositoryMock_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *UserRepositoryMock_GetUserByUsername_Call {
	return &UserRepositoryMock_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *UserRepositoryMock_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *UserRepositoryMock_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepositoryMock_GetUserByUsername_Call) Return(_a0 *models.User, _a1 error) *UserRepositoryMock_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UserRepositoryMock_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByIds provides a mock function with given fields: ctx, ids
func (_m *UserRepositoryMock) GetUsersByIds(ctx context.Context, ids []string) ([]*models.User, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByIds")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*models.User, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*models.User); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_GetUsersByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByIds'
type UserRepositoryMock_GetUsersByIds_Call struct {
	*mock.Call
}

// GetUsersByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *UserRepositoryMock_Expecter) GetUsersByIds(ctx interface{}, ids interface{}) *UserRepositoryMock_GetUsersByIds_Call {
	return &UserRepositoryMock_GetUsersByIds_Call{Call: _e.mock.On("GetUsersByIds", ctx, ids)}
}

func (_c *UserRepositoryMock_GetUsersByIds_Call) Run(run func(ctx context.Context, ids []string)) *UserRepositoryMock_GetUsersByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *UserRepositoryMock_GetUsersByIds_Call) Return(_a0 []*models.User, _a1 error) *UserRepositoryMock_GetUsersByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_GetUsersByIds_Call) RunAndReturn(run func(context.Context, []string) ([]*models.User, error)) *UserRepositoryMock_GetUsersByIds_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUsers provides a mock function with given fields: ctx, query
func (_m *UserRepositoryMock) SearchUsers(ctx context.Context, query string) ([]*models.User, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.User, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.User); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryMock_SearchUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUsers'
type UserRepositoryMock_SearchUsers_Call struct {
	*mock.Call
}

// SearchUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *UserRepositoryMock_Expecter) SearchUsers(ctx interface{}, query interface{}) *UserRepositoryMock_SearchUsers_Call {
	return &UserRepositoryMock_SearchUsers_Call{Call: _e.mock.On("SearchUsers", ctx, query)}
}

func (_c *UserRepositoryMock_SearchUsers_Call) Run(run func(ctx context.Context, query string)) *UserRepositoryMock_SearchUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepositoryMock_SearchUsers_Call) Return(_a0 []*models.User, _a1 error) *UserRepositoryMock_SearchUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryMock_SearchUsers_Call) RunAndReturn(run func(context.Context, string) ([]*models.User, error)) *UserRepositoryMock_SearchUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserRepositoryMock) UpdateUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepositoryMock_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserRepositoryMock_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *UserRepositoryMock_Expecter) UpdateUser(ctx interface{}, user interface{}) *UserRepositoryMock_UpdateUser_Call {
	return &UserRepositoryMock_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *UserRepositoryMock_UpdateUser_Call) Run(run func(ctx context.Context, user *models.User)) *UserRepositoryMock_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *UserRepositoryMock_UpdateUser_Call) Return(_a0 error) *UserRepositoryMock_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepositoryMock_UpdateUser_Call) RunAndReturn(run func(context.Context, *models.User) error) *UserRepositoryMock_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepositoryMock creates a new instance of UserRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryMock {
	mock := &UserRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
