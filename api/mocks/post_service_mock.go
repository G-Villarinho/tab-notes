// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"
)

// PostServiceMock is an autogenerated mock type for the PostService type
type PostServiceMock struct {
	mock.Mock
}

type PostServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PostServiceMock) EXPECT() *PostServiceMock_Expecter {
	return &PostServiceMock_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function with given fields: ctx, userID, title, content
func (_m *PostServiceMock) CreatePost(ctx context.Context, userID string, title string, content string) (*models.PostResponse, error) {
	ret := _m.Called(ctx, userID, title, content)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*models.PostResponse, error)); ok {
		return rf(ctx, userID, title, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *models.PostResponse); ok {
		r0 = rf(ctx, userID, title, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, title, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostServiceMock_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type PostServiceMock_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - title string
//   - content string
func (_e *PostServiceMock_Expecter) CreatePost(ctx interface{}, userID interface{}, title interface{}, content interface{}) *PostServiceMock_CreatePost_Call {
	return &PostServiceMock_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, userID, title, content)}
}

func (_c *PostServiceMock_CreatePost_Call) Run(run func(ctx context.Context, userID string, title string, content string)) *PostServiceMock_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *PostServiceMock_CreatePost_Call) Return(_a0 *models.PostResponse, _a1 error) *PostServiceMock_CreatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostServiceMock_CreatePost_Call) RunAndReturn(run func(context.Context, string, string, string) (*models.PostResponse, error)) *PostServiceMock_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, userID, ID
func (_m *PostServiceMock) DeletePost(ctx context.Context, userID string, ID string) error {
	ret := _m.Called(ctx, userID, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostServiceMock_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type PostServiceMock_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - ID string
func (_e *PostServiceMock_Expecter) DeletePost(ctx interface{}, userID interface{}, ID interface{}) *PostServiceMock_DeletePost_Call {
	return &PostServiceMock_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, userID, ID)}
}

func (_c *PostServiceMock_DeletePost_Call) Run(run func(ctx context.Context, userID string, ID string)) *PostServiceMock_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PostServiceMock_DeletePost_Call) Return(_a0 error) *PostServiceMock_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostServiceMock_DeletePost_Call) RunAndReturn(run func(context.Context, string, string) error) *PostServiceMock_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostByID provides a mock function with given fields: ctx, userID, ID
func (_m *PostServiceMock) GetPostByID(ctx context.Context, userID string, ID string) (*models.PostResponse, error) {
	ret := _m.Called(ctx, userID, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 *models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.PostResponse, error)); ok {
		return rf(ctx, userID, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.PostResponse); ok {
		r0 = rf(ctx, userID, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostServiceMock_GetPostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByID'
type PostServiceMock_GetPostByID_Call struct {
	*mock.Call
}

// GetPostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - ID string
func (_e *PostServiceMock_Expecter) GetPostByID(ctx interface{}, userID interface{}, ID interface{}) *PostServiceMock_GetPostByID_Call {
	return &PostServiceMock_GetPostByID_Call{Call: _e.mock.On("GetPostByID", ctx, userID, ID)}
}

func (_c *PostServiceMock_GetPostByID_Call) Run(run func(ctx context.Context, userID string, ID string)) *PostServiceMock_GetPostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PostServiceMock_GetPostByID_Call) Return(_a0 *models.PostResponse, _a1 error) *PostServiceMock_GetPostByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostServiceMock_GetPostByID_Call) RunAndReturn(run func(context.Context, string, string) (*models.PostResponse, error)) *PostServiceMock_GetPostByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsByAuthorID provides a mock function with given fields: ctx, authorID
func (_m *PostServiceMock) GetPostsByAuthorID(ctx context.Context, authorID string) ([]*models.PostResponse, error) {
	ret := _m.Called(ctx, authorID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsByAuthorID")
	}

	var r0 []*models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.PostResponse, error)); ok {
		return rf(ctx, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.PostResponse); ok {
		r0 = rf(ctx, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostServiceMock_GetPostsByAuthorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsByAuthorID'
type PostServiceMock_GetPostsByAuthorID_Call struct {
	*mock.Call
}

// GetPostsByAuthorID is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID string
func (_e *PostServiceMock_Expecter) GetPostsByAuthorID(ctx interface{}, authorID interface{}) *PostServiceMock_GetPostsByAuthorID_Call {
	return &PostServiceMock_GetPostsByAuthorID_Call{Call: _e.mock.On("GetPostsByAuthorID", ctx, authorID)}
}

func (_c *PostServiceMock_GetPostsByAuthorID_Call) Run(run func(ctx context.Context, authorID string)) *PostServiceMock_GetPostsByAuthorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PostServiceMock_GetPostsByAuthorID_Call) Return(_a0 []*models.PostResponse, _a1 error) *PostServiceMock_GetPostsByAuthorID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostServiceMock_GetPostsByAuthorID_Call) RunAndReturn(run func(context.Context, string) ([]*models.PostResponse, error)) *PostServiceMock_GetPostsByAuthorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsByUsername provides a mock function with given fields: ctx, userID, username
func (_m *PostServiceMock) GetPostsByUsername(ctx context.Context, userID string, username string) ([]*models.PostResponse, error) {
	ret := _m.Called(ctx, userID, username)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsByUsername")
	}

	var r0 []*models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*models.PostResponse, error)); ok {
		return rf(ctx, userID, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*models.PostResponse); ok {
		r0 = rf(ctx, userID, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostServiceMock_GetPostsByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsByUsername'
type PostServiceMock_GetPostsByUsername_Call struct {
	*mock.Call
}

// GetPostsByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - username string
func (_e *PostServiceMock_Expecter) GetPostsByUsername(ctx interface{}, userID interface{}, username interface{}) *PostServiceMock_GetPostsByUsername_Call {
	return &PostServiceMock_GetPostsByUsername_Call{Call: _e.mock.On("GetPostsByUsername", ctx, userID, username)}
}

func (_c *PostServiceMock_GetPostsByUsername_Call) Run(run func(ctx context.Context, userID string, username string)) *PostServiceMock_GetPostsByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PostServiceMock_GetPostsByUsername_Call) Return(_a0 []*models.PostResponse, _a1 error) *PostServiceMock_GetPostsByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostServiceMock_GetPostsByUsername_Call) RunAndReturn(run func(context.Context, string, string) ([]*models.PostResponse, error)) *PostServiceMock_GetPostsByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// LikePost provides a mock function with given fields: ctx, userID, postID
func (_m *PostServiceMock) LikePost(ctx context.Context, userID string, postID string) error {
	ret := _m.Called(ctx, userID, postID)

	if len(ret) == 0 {
		panic("no return value specified for LikePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostServiceMock_LikePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LikePost'
type PostServiceMock_LikePost_Call struct {
	*mock.Call
}

// LikePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - postID string
func (_e *PostServiceMock_Expecter) LikePost(ctx interface{}, userID interface{}, postID interface{}) *PostServiceMock_LikePost_Call {
	return &PostServiceMock_LikePost_Call{Call: _e.mock.On("LikePost", ctx, userID, postID)}
}

func (_c *PostServiceMock_LikePost_Call) Run(run func(ctx context.Context, userID string, postID string)) *PostServiceMock_LikePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PostServiceMock_LikePost_Call) Return(_a0 error) *PostServiceMock_LikePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostServiceMock_LikePost_Call) RunAndReturn(run func(context.Context, string, string) error) *PostServiceMock_LikePost_Call {
	_c.Call.Return(run)
	return _c
}

// UnlikePost provides a mock function with given fields: ctx, userID, postID
func (_m *PostServiceMock) UnlikePost(ctx context.Context, userID string, postID string) error {
	ret := _m.Called(ctx, userID, postID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostServiceMock_UnlikePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlikePost'
type PostServiceMock_UnlikePost_Call struct {
	*mock.Call
}

// UnlikePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - postID string
func (_e *PostServiceMock_Expecter) UnlikePost(ctx interface{}, userID interface{}, postID interface{}) *PostServiceMock_UnlikePost_Call {
	return &PostServiceMock_UnlikePost_Call{Call: _e.mock.On("UnlikePost", ctx, userID, postID)}
}

func (_c *PostServiceMock_UnlikePost_Call) Run(run func(ctx context.Context, userID string, postID string)) *PostServiceMock_UnlikePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PostServiceMock_UnlikePost_Call) Return(_a0 error) *PostServiceMock_UnlikePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostServiceMock_UnlikePost_Call) RunAndReturn(run func(context.Context, string, string) error) *PostServiceMock_UnlikePost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, userID, ID, title, content
func (_m *PostServiceMock) UpdatePost(ctx context.Context, userID string, ID string, title string, content string) error {
	ret := _m.Called(ctx, userID, ID, title, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, userID, ID, title, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostServiceMock_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type PostServiceMock_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - ID string
//   - title string
//   - content string
func (_e *PostServiceMock_Expecter) UpdatePost(ctx interface{}, userID interface{}, ID interface{}, title interface{}, content interface{}) *PostServiceMock_UpdatePost_Call {
	return &PostServiceMock_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, userID, ID, title, content)}
}

func (_c *PostServiceMock_UpdatePost_Call) Run(run func(ctx context.Context, userID string, ID string, title string, content string)) *PostServiceMock_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *PostServiceMock_UpdatePost_Call) Return(_a0 error) *PostServiceMock_UpdatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostServiceMock_UpdatePost_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *PostServiceMock_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostServiceMock creates a new instance of PostServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostServiceMock {
	mock := &PostServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
