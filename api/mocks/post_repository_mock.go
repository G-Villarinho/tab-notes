// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"
)

// PostRepositoryMock is an autogenerated mock type for the PostRepository type
type PostRepositoryMock struct {
	mock.Mock
}

type PostRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PostRepositoryMock) EXPECT() *PostRepositoryMock_Expecter {
	return &PostRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function with given fields: ctx, post
func (_m *PostRepositoryMock) CreatePost(ctx context.Context, post *models.Post) error {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepositoryMock_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type PostRepositoryMock_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post *models.Post
func (_e *PostRepositoryMock_Expecter) CreatePost(ctx interface{}, post interface{}) *PostRepositoryMock_CreatePost_Call {
	return &PostRepositoryMock_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, post)}
}

func (_c *PostRepositoryMock_CreatePost_Call) Run(run func(ctx context.Context, post *models.Post)) *PostRepositoryMock_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Post))
	})
	return _c
}

func (_c *PostRepositoryMock_CreatePost_Call) Return(_a0 error) *PostRepositoryMock_CreatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepositoryMock_CreatePost_Call) RunAndReturn(run func(context.Context, *models.Post) error) *PostRepositoryMock_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, ID
func (_m *PostRepositoryMock) DeletePost(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepositoryMock_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type PostRepositoryMock_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *PostRepositoryMock_Expecter) DeletePost(ctx interface{}, ID interface{}) *PostRepositoryMock_DeletePost_Call {
	return &PostRepositoryMock_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, ID)}
}

func (_c *PostRepositoryMock_DeletePost_Call) Run(run func(ctx context.Context, ID string)) *PostRepositoryMock_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PostRepositoryMock_DeletePost_Call) Return(_a0 error) *PostRepositoryMock_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepositoryMock_DeletePost_Call) RunAndReturn(run func(context.Context, string) error) *PostRepositoryMock_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostByID provides a mock function with given fields: ctx, ID
func (_m *PostRepositoryMock) GetPostByID(ctx context.Context, ID string) (*models.Post, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 *models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Post, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Post); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepositoryMock_GetPostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByID'
type PostRepositoryMock_GetPostByID_Call struct {
	*mock.Call
}

// GetPostByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *PostRepositoryMock_Expecter) GetPostByID(ctx interface{}, ID interface{}) *PostRepositoryMock_GetPostByID_Call {
	return &PostRepositoryMock_GetPostByID_Call{Call: _e.mock.On("GetPostByID", ctx, ID)}
}

func (_c *PostRepositoryMock_GetPostByID_Call) Run(run func(ctx context.Context, ID string)) *PostRepositoryMock_GetPostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PostRepositoryMock_GetPostByID_Call) Return(_a0 *models.Post, _a1 error) *PostRepositoryMock_GetPostByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepositoryMock_GetPostByID_Call) RunAndReturn(run func(context.Context, string) (*models.Post, error)) *PostRepositoryMock_GetPostByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsByAuthorID provides a mock function with given fields: ctx, authorID
func (_m *PostRepositoryMock) GetPostsByAuthorID(ctx context.Context, authorID string) ([]*models.Post, error) {
	ret := _m.Called(ctx, authorID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsByAuthorID")
	}

	var r0 []*models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Post, error)); ok {
		return rf(ctx, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Post); ok {
		r0 = rf(ctx, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRepositoryMock_GetPostsByAuthorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsByAuthorID'
type PostRepositoryMock_GetPostsByAuthorID_Call struct {
	*mock.Call
}

// GetPostsByAuthorID is a helper method to define mock.On call
//   - ctx context.Context
//   - authorID string
func (_e *PostRepositoryMock_Expecter) GetPostsByAuthorID(ctx interface{}, authorID interface{}) *PostRepositoryMock_GetPostsByAuthorID_Call {
	return &PostRepositoryMock_GetPostsByAuthorID_Call{Call: _e.mock.On("GetPostsByAuthorID", ctx, authorID)}
}

func (_c *PostRepositoryMock_GetPostsByAuthorID_Call) Run(run func(ctx context.Context, authorID string)) *PostRepositoryMock_GetPostsByAuthorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PostRepositoryMock_GetPostsByAuthorID_Call) Return(_a0 []*models.Post, _a1 error) *PostRepositoryMock_GetPostsByAuthorID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostRepositoryMock_GetPostsByAuthorID_Call) RunAndReturn(run func(context.Context, string) ([]*models.Post, error)) *PostRepositoryMock_GetPostsByAuthorID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: ctx, post
func (_m *PostRepositoryMock) UpdatePost(ctx context.Context, post *models.Post) error {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Post) error); ok {
		r0 = rf(ctx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostRepositoryMock_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type PostRepositoryMock_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post *models.Post
func (_e *PostRepositoryMock_Expecter) UpdatePost(ctx interface{}, post interface{}) *PostRepositoryMock_UpdatePost_Call {
	return &PostRepositoryMock_UpdatePost_Call{Call: _e.mock.On("UpdatePost", ctx, post)}
}

func (_c *PostRepositoryMock_UpdatePost_Call) Run(run func(ctx context.Context, post *models.Post)) *PostRepositoryMock_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Post))
	})
	return _c
}

func (_c *PostRepositoryMock_UpdatePost_Call) Return(_a0 error) *PostRepositoryMock_UpdatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PostRepositoryMock_UpdatePost_Call) RunAndReturn(run func(context.Context, *models.Post) error) *PostRepositoryMock_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostRepositoryMock creates a new instance of PostRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepositoryMock {
	mock := &PostRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
