// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"
)

// LikeRepositoryMock is an autogenerated mock type for the LikeRepository type
type LikeRepositoryMock struct {
	mock.Mock
}

type LikeRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LikeRepositoryMock) EXPECT() *LikeRepositoryMock_Expecter {
	return &LikeRepositoryMock_Expecter{mock: &_m.Mock}
}

// CheckLike provides a mock function with given fields: ctx, userID, postID
func (_m *LikeRepositoryMock) CheckLike(ctx context.Context, userID string, postID string) (bool, error) {
	ret := _m.Called(ctx, userID, postID)

	if len(ret) == 0 {
		panic("no return value specified for CheckLike")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userID, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userID, postID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeRepositoryMock_CheckLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLike'
type LikeRepositoryMock_CheckLike_Call struct {
	*mock.Call
}

// CheckLike is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - postID string
func (_e *LikeRepositoryMock_Expecter) CheckLike(ctx interface{}, userID interface{}, postID interface{}) *LikeRepositoryMock_CheckLike_Call {
	return &LikeRepositoryMock_CheckLike_Call{Call: _e.mock.On("CheckLike", ctx, userID, postID)}
}

func (_c *LikeRepositoryMock_CheckLike_Call) Run(run func(ctx context.Context, userID string, postID string)) *LikeRepositoryMock_CheckLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LikeRepositoryMock_CheckLike_Call) Return(_a0 bool, _a1 error) *LikeRepositoryMock_CheckLike_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LikeRepositoryMock_CheckLike_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *LikeRepositoryMock_CheckLike_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLike provides a mock function with given fields: ctx, like
func (_m *LikeRepositoryMock) CreateLike(ctx context.Context, like *models.Like) error {
	ret := _m.Called(ctx, like)

	if len(ret) == 0 {
		panic("no return value specified for CreateLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Like) error); ok {
		r0 = rf(ctx, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeRepositoryMock_CreateLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLike'
type LikeRepositoryMock_CreateLike_Call struct {
	*mock.Call
}

// CreateLike is a helper method to define mock.On call
//   - ctx context.Context
//   - like *models.Like
func (_e *LikeRepositoryMock_Expecter) CreateLike(ctx interface{}, like interface{}) *LikeRepositoryMock_CreateLike_Call {
	return &LikeRepositoryMock_CreateLike_Call{Call: _e.mock.On("CreateLike", ctx, like)}
}

func (_c *LikeRepositoryMock_CreateLike_Call) Run(run func(ctx context.Context, like *models.Like)) *LikeRepositoryMock_CreateLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Like))
	})
	return _c
}

func (_c *LikeRepositoryMock_CreateLike_Call) Return(_a0 error) *LikeRepositoryMock_CreateLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LikeRepositoryMock_CreateLike_Call) RunAndReturn(run func(context.Context, *models.Like) error) *LikeRepositoryMock_CreateLike_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLike provides a mock function with given fields: ctx, like
func (_m *LikeRepositoryMock) DeleteLike(ctx context.Context, like *models.Like) error {
	ret := _m.Called(ctx, like)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Like) error); ok {
		r0 = rf(ctx, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeRepositoryMock_DeleteLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLike'
type LikeRepositoryMock_DeleteLike_Call struct {
	*mock.Call
}

// DeleteLike is a helper method to define mock.On call
//   - ctx context.Context
//   - like *models.Like
func (_e *LikeRepositoryMock_Expecter) DeleteLike(ctx interface{}, like interface{}) *LikeRepositoryMock_DeleteLike_Call {
	return &LikeRepositoryMock_DeleteLike_Call{Call: _e.mock.On("DeleteLike", ctx, like)}
}

func (_c *LikeRepositoryMock_DeleteLike_Call) Run(run func(ctx context.Context, like *models.Like)) *LikeRepositoryMock_DeleteLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Like))
	})
	return _c
}

func (_c *LikeRepositoryMock_DeleteLike_Call) Return(_a0 error) *LikeRepositoryMock_DeleteLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LikeRepositoryMock_DeleteLike_Call) RunAndReturn(run func(context.Context, *models.Like) error) *LikeRepositoryMock_DeleteLike_Call {
	_c.Call.Return(run)
	return _c
}

// GetLikedPostIDs provides a mock function with given fields: ctx, userID, postIDs
func (_m *LikeRepositoryMock) GetLikedPostIDs(ctx context.Context, userID string, postIDs []string) ([]string, error) {
	ret := _m.Called(ctx, userID, postIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetLikedPostIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return rf(ctx, userID, postIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, userID, postIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, userID, postIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeRepositoryMock_GetLikedPostIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikedPostIDs'
type LikeRepositoryMock_GetLikedPostIDs_Call struct {
	*mock.Call
}

// GetLikedPostIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - postIDs []string
func (_e *LikeRepositoryMock_Expecter) GetLikedPostIDs(ctx interface{}, userID interface{}, postIDs interface{}) *LikeRepositoryMock_GetLikedPostIDs_Call {
	return &LikeRepositoryMock_GetLikedPostIDs_Call{Call: _e.mock.On("GetLikedPostIDs", ctx, userID, postIDs)}
}

func (_c *LikeRepositoryMock_GetLikedPostIDs_Call) Run(run func(ctx context.Context, userID string, postIDs []string)) *LikeRepositoryMock_GetLikedPostIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *LikeRepositoryMock_GetLikedPostIDs_Call) Return(_a0 []string, _a1 error) *LikeRepositoryMock_GetLikedPostIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LikeRepositoryMock_GetLikedPostIDs_Call) RunAndReturn(run func(context.Context, string, []string) ([]string, error)) *LikeRepositoryMock_GetLikedPostIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewLikeRepositoryMock creates a new instance of LikeRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeRepositoryMock {
	mock := &LikeRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
