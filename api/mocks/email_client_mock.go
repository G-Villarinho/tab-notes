// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"
)

// EmailClientMock is an autogenerated mock type for the EmailClient type
type EmailClientMock struct {
	mock.Mock
}

type EmailClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailClientMock) EXPECT() *EmailClientMock_Expecter {
	return &EmailClientMock_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function with given fields: ctx, email
func (_m *EmailClientMock) SendEmail(ctx context.Context, email *models.Email) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Email) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailClientMock_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type EmailClientMock_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email *models.Email
func (_e *EmailClientMock_Expecter) SendEmail(ctx interface{}, email interface{}) *EmailClientMock_SendEmail_Call {
	return &EmailClientMock_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, email)}
}

func (_c *EmailClientMock_SendEmail_Call) Run(run func(ctx context.Context, email *models.Email)) *EmailClientMock_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Email))
	})
	return _c
}

func (_c *EmailClientMock_SendEmail_Call) Return(_a0 error) *EmailClientMock_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailClientMock_SendEmail_Call) RunAndReturn(run func(context.Context, *models.Email) error) *EmailClientMock_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailClientMock creates a new instance of EmailClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailClientMock {
	mock := &EmailClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
