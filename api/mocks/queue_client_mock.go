// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// QueueClientMock is an autogenerated mock type for the QueueClient type
type QueueClientMock struct {
	mock.Mock
}

type QueueClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *QueueClientMock) EXPECT() *QueueClientMock_Expecter {
	return &QueueClientMock_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *QueueClientMock) Close() {
	_m.Called()
}

// QueueClientMock_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type QueueClientMock_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *QueueClientMock_Expecter) Close() *QueueClientMock_Close_Call {
	return &QueueClientMock_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *QueueClientMock_Close_Call) Run(run func()) *QueueClientMock_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QueueClientMock_Close_Call) Return() *QueueClientMock_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *QueueClientMock_Close_Call) RunAndReturn(run func()) *QueueClientMock_Close_Call {
	_c.Run(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, queue, payload
func (_m *QueueClientMock) Publish(ctx context.Context, queue string, payload interface{}) error {
	ret := _m.Called(ctx, queue, payload)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, queue, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueClientMock_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type QueueClientMock_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - queue string
//   - payload interface{}
func (_e *QueueClientMock_Expecter) Publish(ctx interface{}, queue interface{}, payload interface{}) *QueueClientMock_Publish_Call {
	return &QueueClientMock_Publish_Call{Call: _e.mock.On("Publish", ctx, queue, payload)}
}

func (_c *QueueClientMock_Publish_Call) Run(run func(ctx context.Context, queue string, payload interface{})) *QueueClientMock_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *QueueClientMock_Publish_Call) Return(_a0 error) *QueueClientMock_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueueClientMock_Publish_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *QueueClientMock_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueueClientMock creates a new instance of QueueClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueClientMock {
	mock := &QueueClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
