// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// FollowerHandlerMock is an autogenerated mock type for the FollowerHandler type
type FollowerHandlerMock struct {
	mock.Mock
}

type FollowerHandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FollowerHandlerMock) EXPECT() *FollowerHandlerMock_Expecter {
	return &FollowerHandlerMock_Expecter{mock: &_m.Mock}
}

// FollowUser provides a mock function with given fields: w, r
func (_m *FollowerHandlerMock) FollowUser(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// FollowerHandlerMock_FollowUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FollowUser'
type FollowerHandlerMock_FollowUser_Call struct {
	*mock.Call
}

// FollowUser is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *FollowerHandlerMock_Expecter) FollowUser(w interface{}, r interface{}) *FollowerHandlerMock_FollowUser_Call {
	return &FollowerHandlerMock_FollowUser_Call{Call: _e.mock.On("FollowUser", w, r)}
}

func (_c *FollowerHandlerMock_FollowUser_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *FollowerHandlerMock_FollowUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *FollowerHandlerMock_FollowUser_Call) Return() *FollowerHandlerMock_FollowUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *FollowerHandlerMock_FollowUser_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *FollowerHandlerMock_FollowUser_Call {
	_c.Run(run)
	return _c
}

// GetFollowers provides a mock function with given fields: w, r
func (_m *FollowerHandlerMock) GetFollowers(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// FollowerHandlerMock_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type FollowerHandlerMock_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *FollowerHandlerMock_Expecter) GetFollowers(w interface{}, r interface{}) *FollowerHandlerMock_GetFollowers_Call {
	return &FollowerHandlerMock_GetFollowers_Call{Call: _e.mock.On("GetFollowers", w, r)}
}

func (_c *FollowerHandlerMock_GetFollowers_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *FollowerHandlerMock_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *FollowerHandlerMock_GetFollowers_Call) Return() *FollowerHandlerMock_GetFollowers_Call {
	_c.Call.Return()
	return _c
}

func (_c *FollowerHandlerMock_GetFollowers_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *FollowerHandlerMock_GetFollowers_Call {
	_c.Run(run)
	return _c
}

// GetFollowing provides a mock function with given fields: w, r
func (_m *FollowerHandlerMock) GetFollowing(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// FollowerHandlerMock_GetFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowing'
type FollowerHandlerMock_GetFollowing_Call struct {
	*mock.Call
}

// GetFollowing is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *FollowerHandlerMock_Expecter) GetFollowing(w interface{}, r interface{}) *FollowerHandlerMock_GetFollowing_Call {
	return &FollowerHandlerMock_GetFollowing_Call{Call: _e.mock.On("GetFollowing", w, r)}
}

func (_c *FollowerHandlerMock_GetFollowing_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *FollowerHandlerMock_GetFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *FollowerHandlerMock_GetFollowing_Call) Return() *FollowerHandlerMock_GetFollowing_Call {
	_c.Call.Return()
	return _c
}

func (_c *FollowerHandlerMock_GetFollowing_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *FollowerHandlerMock_GetFollowing_Call {
	_c.Run(run)
	return _c
}

// GetMyFollowers provides a mock function with given fields: w, r
func (_m *FollowerHandlerMock) GetMyFollowers(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// FollowerHandlerMock_GetMyFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyFollowers'
type FollowerHandlerMock_GetMyFollowers_Call struct {
	*mock.Call
}

// GetMyFollowers is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *FollowerHandlerMock_Expecter) GetMyFollowers(w interface{}, r interface{}) *FollowerHandlerMock_GetMyFollowers_Call {
	return &FollowerHandlerMock_GetMyFollowers_Call{Call: _e.mock.On("GetMyFollowers", w, r)}
}

func (_c *FollowerHandlerMock_GetMyFollowers_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *FollowerHandlerMock_GetMyFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *FollowerHandlerMock_GetMyFollowers_Call) Return() *FollowerHandlerMock_GetMyFollowers_Call {
	_c.Call.Return()
	return _c
}

func (_c *FollowerHandlerMock_GetMyFollowers_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *FollowerHandlerMock_GetMyFollowers_Call {
	_c.Run(run)
	return _c
}

// GetMyFollowing provides a mock function with given fields: w, r
func (_m *FollowerHandlerMock) GetMyFollowing(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// FollowerHandlerMock_GetMyFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyFollowing'
type FollowerHandlerMock_GetMyFollowing_Call struct {
	*mock.Call
}

// GetMyFollowing is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *FollowerHandlerMock_Expecter) GetMyFollowing(w interface{}, r interface{}) *FollowerHandlerMock_GetMyFollowing_Call {
	return &FollowerHandlerMock_GetMyFollowing_Call{Call: _e.mock.On("GetMyFollowing", w, r)}
}

func (_c *FollowerHandlerMock_GetMyFollowing_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *FollowerHandlerMock_GetMyFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *FollowerHandlerMock_GetMyFollowing_Call) Return() *FollowerHandlerMock_GetMyFollowing_Call {
	_c.Call.Return()
	return _c
}

func (_c *FollowerHandlerMock_GetMyFollowing_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *FollowerHandlerMock_GetMyFollowing_Call {
	_c.Run(run)
	return _c
}

// UnfollowUser provides a mock function with given fields: w, r
func (_m *FollowerHandlerMock) UnfollowUser(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// FollowerHandlerMock_UnfollowUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnfollowUser'
type FollowerHandlerMock_UnfollowUser_Call struct {
	*mock.Call
}

// UnfollowUser is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *FollowerHandlerMock_Expecter) UnfollowUser(w interface{}, r interface{}) *FollowerHandlerMock_UnfollowUser_Call {
	return &FollowerHandlerMock_UnfollowUser_Call{Call: _e.mock.On("UnfollowUser", w, r)}
}

func (_c *FollowerHandlerMock_UnfollowUser_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *FollowerHandlerMock_UnfollowUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *FollowerHandlerMock_UnfollowUser_Call) Return() *FollowerHandlerMock_UnfollowUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *FollowerHandlerMock_UnfollowUser_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *FollowerHandlerMock_UnfollowUser_Call {
	_c.Run(run)
	return _c
}

// NewFollowerHandlerMock creates a new instance of FollowerHandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFollowerHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FollowerHandlerMock {
	mock := &FollowerHandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
