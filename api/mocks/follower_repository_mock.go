// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"
)

// FollowerRepositoryMock is an autogenerated mock type for the FollowerRepository type
type FollowerRepositoryMock struct {
	mock.Mock
}

type FollowerRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FollowerRepositoryMock) EXPECT() *FollowerRepositoryMock_Expecter {
	return &FollowerRepositoryMock_Expecter{mock: &_m.Mock}
}

// CountFollowers provides a mock function with given fields: ctx, userID
func (_m *FollowerRepositoryMock) CountFollowers(ctx context.Context, userID string) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountFollowers")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerRepositoryMock_CountFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountFollowers'
type FollowerRepositoryMock_CountFollowers_Call struct {
	*mock.Call
}

// CountFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *FollowerRepositoryMock_Expecter) CountFollowers(ctx interface{}, userID interface{}) *FollowerRepositoryMock_CountFollowers_Call {
	return &FollowerRepositoryMock_CountFollowers_Call{Call: _e.mock.On("CountFollowers", ctx, userID)}
}

func (_c *FollowerRepositoryMock_CountFollowers_Call) Run(run func(ctx context.Context, userID string)) *FollowerRepositoryMock_CountFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FollowerRepositoryMock_CountFollowers_Call) Return(_a0 int, _a1 error) *FollowerRepositoryMock_CountFollowers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerRepositoryMock_CountFollowers_Call) RunAndReturn(run func(context.Context, string) (int, error)) *FollowerRepositoryMock_CountFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// CountFollowing provides a mock function with given fields: ctx, userID
func (_m *FollowerRepositoryMock) CountFollowing(ctx context.Context, userID string) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountFollowing")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerRepositoryMock_CountFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountFollowing'
type FollowerRepositoryMock_CountFollowing_Call struct {
	*mock.Call
}

// CountFollowing is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *FollowerRepositoryMock_Expecter) CountFollowing(ctx interface{}, userID interface{}) *FollowerRepositoryMock_CountFollowing_Call {
	return &FollowerRepositoryMock_CountFollowing_Call{Call: _e.mock.On("CountFollowing", ctx, userID)}
}

func (_c *FollowerRepositoryMock_CountFollowing_Call) Run(run func(ctx context.Context, userID string)) *FollowerRepositoryMock_CountFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FollowerRepositoryMock_CountFollowing_Call) Return(_a0 int, _a1 error) *FollowerRepositoryMock_CountFollowing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerRepositoryMock_CountFollowing_Call) RunAndReturn(run func(context.Context, string) (int, error)) *FollowerRepositoryMock_CountFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFollower provides a mock function with given fields: ctx, follower
func (_m *FollowerRepositoryMock) CreateFollower(ctx context.Context, follower *models.Follower) error {
	ret := _m.Called(ctx, follower)

	if len(ret) == 0 {
		panic("no return value specified for CreateFollower")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Follower) error); ok {
		r0 = rf(ctx, follower)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowerRepositoryMock_CreateFollower_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFollower'
type FollowerRepositoryMock_CreateFollower_Call struct {
	*mock.Call
}

// CreateFollower is a helper method to define mock.On call
//   - ctx context.Context
//   - follower *models.Follower
func (_e *FollowerRepositoryMock_Expecter) CreateFollower(ctx interface{}, follower interface{}) *FollowerRepositoryMock_CreateFollower_Call {
	return &FollowerRepositoryMock_CreateFollower_Call{Call: _e.mock.On("CreateFollower", ctx, follower)}
}

func (_c *FollowerRepositoryMock_CreateFollower_Call) Run(run func(ctx context.Context, follower *models.Follower)) *FollowerRepositoryMock_CreateFollower_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Follower))
	})
	return _c
}

func (_c *FollowerRepositoryMock_CreateFollower_Call) Return(_a0 error) *FollowerRepositoryMock_CreateFollower_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FollowerRepositoryMock_CreateFollower_Call) RunAndReturn(run func(context.Context, *models.Follower) error) *FollowerRepositoryMock_CreateFollower_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFollower provides a mock function with given fields: ctx, userID, followerID
func (_m *FollowerRepositoryMock) DeleteFollower(ctx context.Context, userID string, followerID string) error {
	ret := _m.Called(ctx, userID, followerID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFollower")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, followerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowerRepositoryMock_DeleteFollower_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFollower'
type FollowerRepositoryMock_DeleteFollower_Call struct {
	*mock.Call
}

// DeleteFollower is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - followerID string
func (_e *FollowerRepositoryMock_Expecter) DeleteFollower(ctx interface{}, userID interface{}, followerID interface{}) *FollowerRepositoryMock_DeleteFollower_Call {
	return &FollowerRepositoryMock_DeleteFollower_Call{Call: _e.mock.On("DeleteFollower", ctx, userID, followerID)}
}

func (_c *FollowerRepositoryMock_DeleteFollower_Call) Run(run func(ctx context.Context, userID string, followerID string)) *FollowerRepositoryMock_DeleteFollower_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FollowerRepositoryMock_DeleteFollower_Call) Return(_a0 error) *FollowerRepositoryMock_DeleteFollower_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FollowerRepositoryMock_DeleteFollower_Call) RunAndReturn(run func(context.Context, string, string) error) *FollowerRepositoryMock_DeleteFollower_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowStats provides a mock function with given fields: ctx, userID, viewerID
func (_m *FollowerRepositoryMock) GetFollowStats(ctx context.Context, userID string, viewerID string) (*models.FollowStats, error) {
	ret := _m.Called(ctx, userID, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowStats")
	}

	var r0 *models.FollowStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.FollowStats, error)); ok {
		return rf(ctx, userID, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.FollowStats); ok {
		r0 = rf(ctx, userID, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FollowStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerRepositoryMock_GetFollowStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowStats'
type FollowerRepositoryMock_GetFollowStats_Call struct {
	*mock.Call
}

// GetFollowStats is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - viewerID string
func (_e *FollowerRepositoryMock_Expecter) GetFollowStats(ctx interface{}, userID interface{}, viewerID interface{}) *FollowerRepositoryMock_GetFollowStats_Call {
	return &FollowerRepositoryMock_GetFollowStats_Call{Call: _e.mock.On("GetFollowStats", ctx, userID, viewerID)}
}

func (_c *FollowerRepositoryMock_GetFollowStats_Call) Run(run func(ctx context.Context, userID string, viewerID string)) *FollowerRepositoryMock_GetFollowStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FollowerRepositoryMock_GetFollowStats_Call) Return(_a0 *models.FollowStats, _a1 error) *FollowerRepositoryMock_GetFollowStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerRepositoryMock_GetFollowStats_Call) RunAndReturn(run func(context.Context, string, string) (*models.FollowStats, error)) *FollowerRepositoryMock_GetFollowStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowers provides a mock function with given fields: ctx, userID
func (_m *FollowerRepositoryMock) GetFollowers(ctx context.Context, userID string) ([]*models.Follower, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 []*models.Follower
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Follower, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Follower); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Follower)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerRepositoryMock_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type FollowerRepositoryMock_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *FollowerRepositoryMock_Expecter) GetFollowers(ctx interface{}, userID interface{}) *FollowerRepositoryMock_GetFollowers_Call {
	return &FollowerRepositoryMock_GetFollowers_Call{Call: _e.mock.On("GetFollowers", ctx, userID)}
}

func (_c *FollowerRepositoryMock_GetFollowers_Call) Run(run func(ctx context.Context, userID string)) *FollowerRepositoryMock_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FollowerRepositoryMock_GetFollowers_Call) Return(_a0 []*models.Follower, _a1 error) *FollowerRepositoryMock_GetFollowers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerRepositoryMock_GetFollowers_Call) RunAndReturn(run func(context.Context, string) ([]*models.Follower, error)) *FollowerRepositoryMock_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowing provides a mock function with given fields: ctx, followerID
func (_m *FollowerRepositoryMock) GetFollowing(ctx context.Context, followerID string) ([]*models.Follower, error) {
	ret := _m.Called(ctx, followerID)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowing")
	}

	var r0 []*models.Follower
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Follower, error)); ok {
		return rf(ctx, followerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Follower); ok {
		r0 = rf(ctx, followerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Follower)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, followerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerRepositoryMock_GetFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowing'
type FollowerRepositoryMock_GetFollowing_Call struct {
	*mock.Call
}

// GetFollowing is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID string
func (_e *FollowerRepositoryMock_Expecter) GetFollowing(ctx interface{}, followerID interface{}) *FollowerRepositoryMock_GetFollowing_Call {
	return &FollowerRepositoryMock_GetFollowing_Call{Call: _e.mock.On("GetFollowing", ctx, followerID)}
}

func (_c *FollowerRepositoryMock_GetFollowing_Call) Run(run func(ctx context.Context, followerID string)) *FollowerRepositoryMock_GetFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FollowerRepositoryMock_GetFollowing_Call) Return(_a0 []*models.Follower, _a1 error) *FollowerRepositoryMock_GetFollowing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerRepositoryMock_GetFollowing_Call) RunAndReturn(run func(context.Context, string) ([]*models.Follower, error)) *FollowerRepositoryMock_GetFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// NewFollowerRepositoryMock creates a new instance of FollowerRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFollowerRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FollowerRepositoryMock {
	mock := &FollowerRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
