// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RegisterServiceMock is an autogenerated mock type for the RegisterService type
type RegisterServiceMock struct {
	mock.Mock
}

type RegisterServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RegisterServiceMock) EXPECT() *RegisterServiceMock_Expecter {
	return &RegisterServiceMock_Expecter{mock: &_m.Mock}
}

// RegisterUser provides a mock function with given fields: ctx, name, username, email
func (_m *RegisterServiceMock) RegisterUser(ctx context.Context, name string, username string, email string) error {
	ret := _m.Called(ctx, name, username, email)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, name, username, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterServiceMock_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type RegisterServiceMock_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - username string
//   - email string
func (_e *RegisterServiceMock_Expecter) RegisterUser(ctx interface{}, name interface{}, username interface{}, email interface{}) *RegisterServiceMock_RegisterUser_Call {
	return &RegisterServiceMock_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, name, username, email)}
}

func (_c *RegisterServiceMock_RegisterUser_Call) Run(run func(ctx context.Context, name string, username string, email string)) *RegisterServiceMock_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *RegisterServiceMock_RegisterUser_Call) Return(_a0 error) *RegisterServiceMock_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RegisterServiceMock_RegisterUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *RegisterServiceMock_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegisterServiceMock creates a new instance of RegisterServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegisterServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegisterServiceMock {
	mock := &RegisterServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
