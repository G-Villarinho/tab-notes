// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SessionRepositoryMock is an autogenerated mock type for the SessionRepository type
type SessionRepositoryMock struct {
	mock.Mock
}

type SessionRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepositoryMock) EXPECT() *SessionRepositoryMock_Expecter {
	return &SessionRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, session
func (_m *SessionRepositoryMock) CreateSession(ctx context.Context, session *models.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionRepositoryMock_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session *models.Session
func (_e *SessionRepositoryMock_Expecter) CreateSession(ctx interface{}, session interface{}) *SessionRepositoryMock_CreateSession_Call {
	return &SessionRepositoryMock_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, session)}
}

func (_c *SessionRepositoryMock_CreateSession_Call) Run(run func(ctx context.Context, session *models.Session)) *SessionRepositoryMock_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Session))
	})
	return _c
}

func (_c *SessionRepositoryMock_CreateSession_Call) Return(_a0 error) *SessionRepositoryMock_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_CreateSession_Call) RunAndReturn(run func(context.Context, *models.Session) error) *SessionRepositoryMock_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, id
func (_m *SessionRepositoryMock) DeleteSession(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type SessionRepositoryMock_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *SessionRepositoryMock_Expecter) DeleteSession(ctx interface{}, id interface{}) *SessionRepositoryMock_DeleteSession_Call {
	return &SessionRepositoryMock_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, id)}
}

func (_c *SessionRepositoryMock_DeleteSession_Call) Run(run func(ctx context.Context, id string)) *SessionRepositoryMock_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionRepositoryMock_DeleteSession_Call) Return(_a0 error) *SessionRepositoryMock_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_DeleteSession_Call) RunAndReturn(run func(context.Context, string) error) *SessionRepositoryMock_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionById provides a mock function with given fields: ctx, id
func (_m *SessionRepositoryMock) GetSessionById(ctx context.Context, id string) (*models.Session, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionById")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Session, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Session); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepositoryMock_GetSessionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionById'
type SessionRepositoryMock_GetSessionById_Call struct {
	*mock.Call
}

// GetSessionById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *SessionRepositoryMock_Expecter) GetSessionById(ctx interface{}, id interface{}) *SessionRepositoryMock_GetSessionById_Call {
	return &SessionRepositoryMock_GetSessionById_Call{Call: _e.mock.On("GetSessionById", ctx, id)}
}

func (_c *SessionRepositoryMock_GetSessionById_Call) Run(run func(ctx context.Context, id string)) *SessionRepositoryMock_GetSessionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionRepositoryMock_GetSessionById_Call) Return(_a0 *models.Session, _a1 error) *SessionRepositoryMock_GetSessionById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepositoryMock_GetSessionById_Call) RunAndReturn(run func(context.Context, string) (*models.Session, error)) *SessionRepositoryMock_GetSessionById_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByToken provides a mock function with given fields: ctx, token
func (_m *SessionRepositoryMock) GetSessionByToken(ctx context.Context, token string) (*models.Session, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByToken")
	}

	var r0 *models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Session, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Session); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepositoryMock_GetSessionByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByToken'
type SessionRepositoryMock_GetSessionByToken_Call struct {
	*mock.Call
}

// GetSessionByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *SessionRepositoryMock_Expecter) GetSessionByToken(ctx interface{}, token interface{}) *SessionRepositoryMock_GetSessionByToken_Call {
	return &SessionRepositoryMock_GetSessionByToken_Call{Call: _e.mock.On("GetSessionByToken", ctx, token)}
}

func (_c *SessionRepositoryMock_GetSessionByToken_Call) Run(run func(ctx context.Context, token string)) *SessionRepositoryMock_GetSessionByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionRepositoryMock_GetSessionByToken_Call) Return(_a0 *models.Session, _a1 error) *SessionRepositoryMock_GetSessionByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepositoryMock_GetSessionByToken_Call) RunAndReturn(run func(context.Context, string) (*models.Session, error)) *SessionRepositoryMock_GetSessionByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionsByUserID provides a mock function with given fields: ctx, userID
func (_m *SessionRepositoryMock) GetSessionsByUserID(ctx context.Context, userID string) ([]*models.Session, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionsByUserID")
	}

	var r0 []*models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Session, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Session); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepositoryMock_GetSessionsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionsByUserID'
type SessionRepositoryMock_GetSessionsByUserID_Call struct {
	*mock.Call
}

// GetSessionsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *SessionRepositoryMock_Expecter) GetSessionsByUserID(ctx interface{}, userID interface{}) *SessionRepositoryMock_GetSessionsByUserID_Call {
	return &SessionRepositoryMock_GetSessionsByUserID_Call{Call: _e.mock.On("GetSessionsByUserID", ctx, userID)}
}

func (_c *SessionRepositoryMock_GetSessionsByUserID_Call) Run(run func(ctx context.Context, userID string)) *SessionRepositoryMock_GetSessionsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionRepositoryMock_GetSessionsByUserID_Call) Return(_a0 []*models.Session, _a1 error) *SessionRepositoryMock_GetSessionsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepositoryMock_GetSessionsByUserID_Call) RunAndReturn(run func(context.Context, string) ([]*models.Session, error)) *SessionRepositoryMock_GetSessionsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// IsSessionRevoked provides a mock function with given fields: ctx, id
func (_m *SessionRepositoryMock) IsSessionRevoked(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsSessionRevoked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRepositoryMock_IsSessionRevoked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSessionRevoked'
type SessionRepositoryMock_IsSessionRevoked_Call struct {
	*mock.Call
}

// IsSessionRevoked is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *SessionRepositoryMock_Expecter) IsSessionRevoked(ctx interface{}, id interface{}) *SessionRepositoryMock_IsSessionRevoked_Call {
	return &SessionRepositoryMock_IsSessionRevoked_Call{Call: _e.mock.On("IsSessionRevoked", ctx, id)}
}

func (_c *SessionRepositoryMock_IsSessionRevoked_Call) Run(run func(ctx context.Context, id string)) *SessionRepositoryMock_IsSessionRevoked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionRepositoryMock_IsSessionRevoked_Call) Return(_a0 bool, _a1 error) *SessionRepositoryMock_IsSessionRevoked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionRepositoryMock_IsSessionRevoked_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *SessionRepositoryMock_IsSessionRevoked_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAllSessionByUserIDExceptCurrent provides a mock function with given fields: ctx, userID, currentSessionID, revokedAt
func (_m *SessionRepositoryMock) RevokeAllSessionByUserIDExceptCurrent(ctx context.Context, userID string, currentSessionID string, revokedAt time.Time) error {
	ret := _m.Called(ctx, userID, currentSessionID, revokedAt)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAllSessionByUserIDExceptCurrent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) error); ok {
		r0 = rf(ctx, userID, currentSessionID, revokedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAllSessionByUserIDExceptCurrent'
type SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call struct {
	*mock.Call
}

// RevokeAllSessionByUserIDExceptCurrent is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - currentSessionID string
//   - revokedAt time.Time
func (_e *SessionRepositoryMock_Expecter) RevokeAllSessionByUserIDExceptCurrent(ctx interface{}, userID interface{}, currentSessionID interface{}, revokedAt interface{}) *SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call {
	return &SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call{Call: _e.mock.On("RevokeAllSessionByUserIDExceptCurrent", ctx, userID, currentSessionID, revokedAt)}
}

func (_c *SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call) Run(run func(ctx context.Context, userID string, currentSessionID string, revokedAt time.Time)) *SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call) Return(_a0 error) *SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call) RunAndReturn(run func(context.Context, string, string, time.Time) error) *SessionRepositoryMock_RevokeAllSessionByUserIDExceptCurrent_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAllSessionsByUserID provides a mock function with given fields: ctx, userID, revoketAt
func (_m *SessionRepositoryMock) RevokeAllSessionsByUserID(ctx context.Context, userID string, revoketAt time.Time) error {
	ret := _m.Called(ctx, userID, revoketAt)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAllSessionsByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, userID, revoketAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_RevokeAllSessionsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAllSessionsByUserID'
type SessionRepositoryMock_RevokeAllSessionsByUserID_Call struct {
	*mock.Call
}

// RevokeAllSessionsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - revoketAt time.Time
func (_e *SessionRepositoryMock_Expecter) RevokeAllSessionsByUserID(ctx interface{}, userID interface{}, revoketAt interface{}) *SessionRepositoryMock_RevokeAllSessionsByUserID_Call {
	return &SessionRepositoryMock_RevokeAllSessionsByUserID_Call{Call: _e.mock.On("RevokeAllSessionsByUserID", ctx, userID, revoketAt)}
}

func (_c *SessionRepositoryMock_RevokeAllSessionsByUserID_Call) Run(run func(ctx context.Context, userID string, revoketAt time.Time)) *SessionRepositoryMock_RevokeAllSessionsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *SessionRepositoryMock_RevokeAllSessionsByUserID_Call) Return(_a0 error) *SessionRepositoryMock_RevokeAllSessionsByUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_RevokeAllSessionsByUserID_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *SessionRepositoryMock_RevokeAllSessionsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeSession provides a mock function with given fields: ctx, id, revokedAt
func (_m *SessionRepositoryMock) RevokeSession(ctx context.Context, id string, revokedAt time.Time) error {
	ret := _m.Called(ctx, id, revokedAt)

	if len(ret) == 0 {
		panic("no return value specified for RevokeSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, id, revokedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_RevokeSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeSession'
type SessionRepositoryMock_RevokeSession_Call struct {
	*mock.Call
}

// RevokeSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - revokedAt time.Time
func (_e *SessionRepositoryMock_Expecter) RevokeSession(ctx interface{}, id interface{}, revokedAt interface{}) *SessionRepositoryMock_RevokeSession_Call {
	return &SessionRepositoryMock_RevokeSession_Call{Call: _e.mock.On("RevokeSession", ctx, id, revokedAt)}
}

func (_c *SessionRepositoryMock_RevokeSession_Call) Run(run func(ctx context.Context, id string, revokedAt time.Time)) *SessionRepositoryMock_RevokeSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *SessionRepositoryMock_RevokeSession_Call) Return(_a0 error) *SessionRepositoryMock_RevokeSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_RevokeSession_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *SessionRepositoryMock_RevokeSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSession provides a mock function with given fields: ctx, session
func (_m *SessionRepositoryMock) UpdateSession(ctx context.Context, session *models.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_UpdateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSession'
type SessionRepositoryMock_UpdateSession_Call struct {
	*mock.Call
}

// UpdateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session *models.Session
func (_e *SessionRepositoryMock_Expecter) UpdateSession(ctx interface{}, session interface{}) *SessionRepositoryMock_UpdateSession_Call {
	return &SessionRepositoryMock_UpdateSession_Call{Call: _e.mock.On("UpdateSession", ctx, session)}
}

func (_c *SessionRepositoryMock_UpdateSession_Call) Run(run func(ctx context.Context, session *models.Session)) *SessionRepositoryMock_UpdateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Session))
	})
	return _c
}

func (_c *SessionRepositoryMock_UpdateSession_Call) Return(_a0 error) *SessionRepositoryMock_UpdateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_UpdateSession_Call) RunAndReturn(run func(context.Context, *models.Session) error) *SessionRepositoryMock_UpdateSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionRepositoryMock creates a new instance of SessionRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepositoryMock {
	mock := &SessionRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
