// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// PostHandlerMock is an autogenerated mock type for the PostHandler type
type PostHandlerMock struct {
	mock.Mock
}

type PostHandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PostHandlerMock) EXPECT() *PostHandlerMock_Expecter {
	return &PostHandlerMock_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function with given fields: w, r
func (_m *PostHandlerMock) CreatePost(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PostHandlerMock_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type PostHandlerMock_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *PostHandlerMock_Expecter) CreatePost(w interface{}, r interface{}) *PostHandlerMock_CreatePost_Call {
	return &PostHandlerMock_CreatePost_Call{Call: _e.mock.On("CreatePost", w, r)}
}

func (_c *PostHandlerMock_CreatePost_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *PostHandlerMock_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *PostHandlerMock_CreatePost_Call) Return() *PostHandlerMock_CreatePost_Call {
	_c.Call.Return()
	return _c
}

func (_c *PostHandlerMock_CreatePost_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *PostHandlerMock_CreatePost_Call {
	_c.Run(run)
	return _c
}

// DeletePost provides a mock function with given fields: w, r
func (_m *PostHandlerMock) DeletePost(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PostHandlerMock_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type PostHandlerMock_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *PostHandlerMock_Expecter) DeletePost(w interface{}, r interface{}) *PostHandlerMock_DeletePost_Call {
	return &PostHandlerMock_DeletePost_Call{Call: _e.mock.On("DeletePost", w, r)}
}

func (_c *PostHandlerMock_DeletePost_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *PostHandlerMock_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *PostHandlerMock_DeletePost_Call) Return() *PostHandlerMock_DeletePost_Call {
	_c.Call.Return()
	return _c
}

func (_c *PostHandlerMock_DeletePost_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *PostHandlerMock_DeletePost_Call {
	_c.Run(run)
	return _c
}

// GetPostByID provides a mock function with given fields: w, r
func (_m *PostHandlerMock) GetPostByID(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PostHandlerMock_GetPostByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByID'
type PostHandlerMock_GetPostByID_Call struct {
	*mock.Call
}

// GetPostByID is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *PostHandlerMock_Expecter) GetPostByID(w interface{}, r interface{}) *PostHandlerMock_GetPostByID_Call {
	return &PostHandlerMock_GetPostByID_Call{Call: _e.mock.On("GetPostByID", w, r)}
}

func (_c *PostHandlerMock_GetPostByID_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *PostHandlerMock_GetPostByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *PostHandlerMock_GetPostByID_Call) Return() *PostHandlerMock_GetPostByID_Call {
	_c.Call.Return()
	return _c
}

func (_c *PostHandlerMock_GetPostByID_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *PostHandlerMock_GetPostByID_Call {
	_c.Run(run)
	return _c
}

// GetPostsByAuthorID provides a mock function with given fields: w, r
func (_m *PostHandlerMock) GetPostsByAuthorID(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PostHandlerMock_GetPostsByAuthorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsByAuthorID'
type PostHandlerMock_GetPostsByAuthorID_Call struct {
	*mock.Call
}

// GetPostsByAuthorID is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *PostHandlerMock_Expecter) GetPostsByAuthorID(w interface{}, r interface{}) *PostHandlerMock_GetPostsByAuthorID_Call {
	return &PostHandlerMock_GetPostsByAuthorID_Call{Call: _e.mock.On("GetPostsByAuthorID", w, r)}
}

func (_c *PostHandlerMock_GetPostsByAuthorID_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *PostHandlerMock_GetPostsByAuthorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *PostHandlerMock_GetPostsByAuthorID_Call) Return() *PostHandlerMock_GetPostsByAuthorID_Call {
	_c.Call.Return()
	return _c
}

func (_c *PostHandlerMock_GetPostsByAuthorID_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *PostHandlerMock_GetPostsByAuthorID_Call {
	_c.Run(run)
	return _c
}

// GetPostsByUsername provides a mock function with given fields: w, r
func (_m *PostHandlerMock) GetPostsByUsername(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PostHandlerMock_GetPostsByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsByUsername'
type PostHandlerMock_GetPostsByUsername_Call struct {
	*mock.Call
}

// GetPostsByUsername is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *PostHandlerMock_Expecter) GetPostsByUsername(w interface{}, r interface{}) *PostHandlerMock_GetPostsByUsername_Call {
	return &PostHandlerMock_GetPostsByUsername_Call{Call: _e.mock.On("GetPostsByUsername", w, r)}
}

func (_c *PostHandlerMock_GetPostsByUsername_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *PostHandlerMock_GetPostsByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *PostHandlerMock_GetPostsByUsername_Call) Return() *PostHandlerMock_GetPostsByUsername_Call {
	_c.Call.Return()
	return _c
}

func (_c *PostHandlerMock_GetPostsByUsername_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *PostHandlerMock_GetPostsByUsername_Call {
	_c.Run(run)
	return _c
}

// LikePost provides a mock function with given fields: w, r
func (_m *PostHandlerMock) LikePost(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PostHandlerMock_LikePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LikePost'
type PostHandlerMock_LikePost_Call struct {
	*mock.Call
}

// LikePost is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *PostHandlerMock_Expecter) LikePost(w interface{}, r interface{}) *PostHandlerMock_LikePost_Call {
	return &PostHandlerMock_LikePost_Call{Call: _e.mock.On("LikePost", w, r)}
}

func (_c *PostHandlerMock_LikePost_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *PostHandlerMock_LikePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *PostHandlerMock_LikePost_Call) Return() *PostHandlerMock_LikePost_Call {
	_c.Call.Return()
	return _c
}

func (_c *PostHandlerMock_LikePost_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *PostHandlerMock_LikePost_Call {
	_c.Run(run)
	return _c
}

// UnlikePost provides a mock function with given fields: w, r
func (_m *PostHandlerMock) UnlikePost(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PostHandlerMock_UnlikePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlikePost'
type PostHandlerMock_UnlikePost_Call struct {
	*mock.Call
}

// UnlikePost is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *PostHandlerMock_Expecter) UnlikePost(w interface{}, r interface{}) *PostHandlerMock_UnlikePost_Call {
	return &PostHandlerMock_UnlikePost_Call{Call: _e.mock.On("UnlikePost", w, r)}
}

func (_c *PostHandlerMock_UnlikePost_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *PostHandlerMock_UnlikePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *PostHandlerMock_UnlikePost_Call) Return() *PostHandlerMock_UnlikePost_Call {
	_c.Call.Return()
	return _c
}

func (_c *PostHandlerMock_UnlikePost_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *PostHandlerMock_UnlikePost_Call {
	_c.Run(run)
	return _c
}

// UpdatePost provides a mock function with given fields: w, r
func (_m *PostHandlerMock) UpdatePost(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// PostHandlerMock_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type PostHandlerMock_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *PostHandlerMock_Expecter) UpdatePost(w interface{}, r interface{}) *PostHandlerMock_UpdatePost_Call {
	return &PostHandlerMock_UpdatePost_Call{Call: _e.mock.On("UpdatePost", w, r)}
}

func (_c *PostHandlerMock_UpdatePost_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *PostHandlerMock_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *PostHandlerMock_UpdatePost_Call) Return() *PostHandlerMock_UpdatePost_Call {
	_c.Call.Return()
	return _c
}

func (_c *PostHandlerMock_UpdatePost_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *PostHandlerMock_UpdatePost_Call {
	_c.Run(run)
	return _c
}

// NewPostHandlerMock creates a new instance of PostHandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostHandlerMock {
	mock := &PostHandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
