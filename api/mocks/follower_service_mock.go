// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/tab-notes-api/models"
	mock "github.com/stretchr/testify/mock"
)

// FollowerServiceMock is an autogenerated mock type for the FollowerService type
type FollowerServiceMock struct {
	mock.Mock
}

type FollowerServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FollowerServiceMock) EXPECT() *FollowerServiceMock_Expecter {
	return &FollowerServiceMock_Expecter{mock: &_m.Mock}
}

// FollowUser provides a mock function with given fields: ctx, followerID, username
func (_m *FollowerServiceMock) FollowUser(ctx context.Context, followerID string, username string) error {
	ret := _m.Called(ctx, followerID, username)

	if len(ret) == 0 {
		panic("no return value specified for FollowUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, followerID, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowerServiceMock_FollowUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FollowUser'
type FollowerServiceMock_FollowUser_Call struct {
	*mock.Call
}

// FollowUser is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID string
//   - username string
func (_e *FollowerServiceMock_Expecter) FollowUser(ctx interface{}, followerID interface{}, username interface{}) *FollowerServiceMock_FollowUser_Call {
	return &FollowerServiceMock_FollowUser_Call{Call: _e.mock.On("FollowUser", ctx, followerID, username)}
}

func (_c *FollowerServiceMock_FollowUser_Call) Run(run func(ctx context.Context, followerID string, username string)) *FollowerServiceMock_FollowUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FollowerServiceMock_FollowUser_Call) Return(_a0 error) *FollowerServiceMock_FollowUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FollowerServiceMock_FollowUser_Call) RunAndReturn(run func(context.Context, string, string) error) *FollowerServiceMock_FollowUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowStats provides a mock function with given fields: ctx, userID, viewerID
func (_m *FollowerServiceMock) GetFollowStats(ctx context.Context, userID string, viewerID string) (*models.FollowStats, error) {
	ret := _m.Called(ctx, userID, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowStats")
	}

	var r0 *models.FollowStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.FollowStats, error)); ok {
		return rf(ctx, userID, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.FollowStats); ok {
		r0 = rf(ctx, userID, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.FollowStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerServiceMock_GetFollowStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowStats'
type FollowerServiceMock_GetFollowStats_Call struct {
	*mock.Call
}

// GetFollowStats is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - viewerID string
func (_e *FollowerServiceMock_Expecter) GetFollowStats(ctx interface{}, userID interface{}, viewerID interface{}) *FollowerServiceMock_GetFollowStats_Call {
	return &FollowerServiceMock_GetFollowStats_Call{Call: _e.mock.On("GetFollowStats", ctx, userID, viewerID)}
}

func (_c *FollowerServiceMock_GetFollowStats_Call) Run(run func(ctx context.Context, userID string, viewerID string)) *FollowerServiceMock_GetFollowStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FollowerServiceMock_GetFollowStats_Call) Return(_a0 *models.FollowStats, _a1 error) *FollowerServiceMock_GetFollowStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerServiceMock_GetFollowStats_Call) RunAndReturn(run func(context.Context, string, string) (*models.FollowStats, error)) *FollowerServiceMock_GetFollowStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowers provides a mock function with given fields: ctx, username
func (_m *FollowerServiceMock) GetFollowers(ctx context.Context, username string) ([]*models.FollowerResponse, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 []*models.FollowerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.FollowerResponse, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.FollowerResponse); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FollowerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerServiceMock_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type FollowerServiceMock_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *FollowerServiceMock_Expecter) GetFollowers(ctx interface{}, username interface{}) *FollowerServiceMock_GetFollowers_Call {
	return &FollowerServiceMock_GetFollowers_Call{Call: _e.mock.On("GetFollowers", ctx, username)}
}

func (_c *FollowerServiceMock_GetFollowers_Call) Run(run func(ctx context.Context, username string)) *FollowerServiceMock_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FollowerServiceMock_GetFollowers_Call) Return(_a0 []*models.FollowerResponse, _a1 error) *FollowerServiceMock_GetFollowers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerServiceMock_GetFollowers_Call) RunAndReturn(run func(context.Context, string) ([]*models.FollowerResponse, error)) *FollowerServiceMock_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowing provides a mock function with given fields: ctx, username
func (_m *FollowerServiceMock) GetFollowing(ctx context.Context, username string) ([]*models.FollowerResponse, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowing")
	}

	var r0 []*models.FollowerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.FollowerResponse, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.FollowerResponse); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FollowerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerServiceMock_GetFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowing'
type FollowerServiceMock_GetFollowing_Call struct {
	*mock.Call
}

// GetFollowing is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *FollowerServiceMock_Expecter) GetFollowing(ctx interface{}, username interface{}) *FollowerServiceMock_GetFollowing_Call {
	return &FollowerServiceMock_GetFollowing_Call{Call: _e.mock.On("GetFollowing", ctx, username)}
}

func (_c *FollowerServiceMock_GetFollowing_Call) Run(run func(ctx context.Context, username string)) *FollowerServiceMock_GetFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FollowerServiceMock_GetFollowing_Call) Return(_a0 []*models.FollowerResponse, _a1 error) *FollowerServiceMock_GetFollowing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerServiceMock_GetFollowing_Call) RunAndReturn(run func(context.Context, string) ([]*models.FollowerResponse, error)) *FollowerServiceMock_GetFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// GetMyFollowers provides a mock function with given fields: ctx, userID
func (_m *FollowerServiceMock) GetMyFollowers(ctx context.Context, userID string) ([]*models.FollowerResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMyFollowers")
	}

	var r0 []*models.FollowerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.FollowerResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.FollowerResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FollowerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerServiceMock_GetMyFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyFollowers'
type FollowerServiceMock_GetMyFollowers_Call struct {
	*mock.Call
}

// GetMyFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *FollowerServiceMock_Expecter) GetMyFollowers(ctx interface{}, userID interface{}) *FollowerServiceMock_GetMyFollowers_Call {
	return &FollowerServiceMock_GetMyFollowers_Call{Call: _e.mock.On("GetMyFollowers", ctx, userID)}
}

func (_c *FollowerServiceMock_GetMyFollowers_Call) Run(run func(ctx context.Context, userID string)) *FollowerServiceMock_GetMyFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FollowerServiceMock_GetMyFollowers_Call) Return(_a0 []*models.FollowerResponse, _a1 error) *FollowerServiceMock_GetMyFollowers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerServiceMock_GetMyFollowers_Call) RunAndReturn(run func(context.Context, string) ([]*models.FollowerResponse, error)) *FollowerServiceMock_GetMyFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// GetMyFollowing provides a mock function with given fields: ctx, userID
func (_m *FollowerServiceMock) GetMyFollowing(ctx context.Context, userID string) ([]*models.FollowerResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMyFollowing")
	}

	var r0 []*models.FollowerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.FollowerResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.FollowerResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.FollowerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowerServiceMock_GetMyFollowing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyFollowing'
type FollowerServiceMock_GetMyFollowing_Call struct {
	*mock.Call
}

// GetMyFollowing is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *FollowerServiceMock_Expecter) GetMyFollowing(ctx interface{}, userID interface{}) *FollowerServiceMock_GetMyFollowing_Call {
	return &FollowerServiceMock_GetMyFollowing_Call{Call: _e.mock.On("GetMyFollowing", ctx, userID)}
}

func (_c *FollowerServiceMock_GetMyFollowing_Call) Run(run func(ctx context.Context, userID string)) *FollowerServiceMock_GetMyFollowing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FollowerServiceMock_GetMyFollowing_Call) Return(_a0 []*models.FollowerResponse, _a1 error) *FollowerServiceMock_GetMyFollowing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowerServiceMock_GetMyFollowing_Call) RunAndReturn(run func(context.Context, string) ([]*models.FollowerResponse, error)) *FollowerServiceMock_GetMyFollowing_Call {
	_c.Call.Return(run)
	return _c
}

// UnfollowUser provides a mock function with given fields: ctx, followerID, username
func (_m *FollowerServiceMock) UnfollowUser(ctx context.Context, followerID string, username string) error {
	ret := _m.Called(ctx, followerID, username)

	if len(ret) == 0 {
		panic("no return value specified for UnfollowUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, followerID, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowerServiceMock_UnfollowUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnfollowUser'
type FollowerServiceMock_UnfollowUser_Call struct {
	*mock.Call
}

// UnfollowUser is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID string
//   - username string
func (_e *FollowerServiceMock_Expecter) UnfollowUser(ctx interface{}, followerID interface{}, username interface{}) *FollowerServiceMock_UnfollowUser_Call {
	return &FollowerServiceMock_UnfollowUser_Call{Call: _e.mock.On("UnfollowUser", ctx, followerID, username)}
}

func (_c *FollowerServiceMock_UnfollowUser_Call) Run(run func(ctx context.Context, followerID string, username string)) *FollowerServiceMock_UnfollowUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FollowerServiceMock_UnfollowUser_Call) Return(_a0 error) *FollowerServiceMock_UnfollowUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FollowerServiceMock_UnfollowUser_Call) RunAndReturn(run func(context.Context, string, string) error) *FollowerServiceMock_UnfollowUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewFollowerServiceMock creates a new instance of FollowerServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFollowerServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FollowerServiceMock {
	mock := &FollowerServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
