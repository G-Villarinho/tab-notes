// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RequestContextMock is an autogenerated mock type for the RequestContext type
type RequestContextMock struct {
	mock.Mock
}

type RequestContextMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestContextMock) EXPECT() *RequestContextMock_Expecter {
	return &RequestContextMock_Expecter{mock: &_m.Mock}
}

// GetSessionID provides a mock function with given fields: ctx
func (_m *RequestContextMock) GetSessionID(ctx context.Context) (string, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionID")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (string, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// RequestContextMock_GetSessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionID'
type RequestContextMock_GetSessionID_Call struct {
	*mock.Call
}

// GetSessionID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RequestContextMock_Expecter) GetSessionID(ctx interface{}) *RequestContextMock_GetSessionID_Call {
	return &RequestContextMock_GetSessionID_Call{Call: _e.mock.On("GetSessionID", ctx)}
}

func (_c *RequestContextMock_GetSessionID_Call) Run(run func(ctx context.Context)) *RequestContextMock_GetSessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RequestContextMock_GetSessionID_Call) Return(_a0 string, _a1 bool) *RequestContextMock_GetSessionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestContextMock_GetSessionID_Call) RunAndReturn(run func(context.Context) (string, bool)) *RequestContextMock_GetSessionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function with given fields: ctx
func (_m *RequestContextMock) GetToken(ctx context.Context) (string, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (string, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// RequestContextMock_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type RequestContextMock_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RequestContextMock_Expecter) GetToken(ctx interface{}) *RequestContextMock_GetToken_Call {
	return &RequestContextMock_GetToken_Call{Call: _e.mock.On("GetToken", ctx)}
}

func (_c *RequestContextMock_GetToken_Call) Run(run func(ctx context.Context)) *RequestContextMock_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RequestContextMock_GetToken_Call) Return(_a0 string, _a1 bool) *RequestContextMock_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestContextMock_GetToken_Call) RunAndReturn(run func(context.Context) (string, bool)) *RequestContextMock_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function with given fields: ctx
func (_m *RequestContextMock) GetUserID(ctx context.Context) (string, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context) (string, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// RequestContextMock_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type RequestContextMock_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RequestContextMock_Expecter) GetUserID(ctx interface{}) *RequestContextMock_GetUserID_Call {
	return &RequestContextMock_GetUserID_Call{Call: _e.mock.On("GetUserID", ctx)}
}

func (_c *RequestContextMock_GetUserID_Call) Run(run func(ctx context.Context)) *RequestContextMock_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RequestContextMock_GetUserID_Call) Return(_a0 string, _a1 bool) *RequestContextMock_GetUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestContextMock_GetUserID_Call) RunAndReturn(run func(context.Context) (string, bool)) *RequestContextMock_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// SetSessionID provides a mock function with given fields: ctx, sessionID
func (_m *RequestContextMock) SetSessionID(ctx context.Context, sessionID string) context.Context {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for SetSessionID")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// RequestContextMock_SetSessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionID'
type RequestContextMock_SetSessionID_Call struct {
	*mock.Call
}

// SetSessionID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *RequestContextMock_Expecter) SetSessionID(ctx interface{}, sessionID interface{}) *RequestContextMock_SetSessionID_Call {
	return &RequestContextMock_SetSessionID_Call{Call: _e.mock.On("SetSessionID", ctx, sessionID)}
}

func (_c *RequestContextMock_SetSessionID_Call) Run(run func(ctx context.Context, sessionID string)) *RequestContextMock_SetSessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RequestContextMock_SetSessionID_Call) Return(_a0 context.Context) *RequestContextMock_SetSessionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestContextMock_SetSessionID_Call) RunAndReturn(run func(context.Context, string) context.Context) *RequestContextMock_SetSessionID_Call {
	_c.Call.Return(run)
	return _c
}

// SetToken provides a mock function with given fields: ctx, token
func (_m *RequestContextMock) SetToken(ctx context.Context, token string) context.Context {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for SetToken")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// RequestContextMock_SetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetToken'
type RequestContextMock_SetToken_Call struct {
	*mock.Call
}

// SetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *RequestContextMock_Expecter) SetToken(ctx interface{}, token interface{}) *RequestContextMock_SetToken_Call {
	return &RequestContextMock_SetToken_Call{Call: _e.mock.On("SetToken", ctx, token)}
}

func (_c *RequestContextMock_SetToken_Call) Run(run func(ctx context.Context, token string)) *RequestContextMock_SetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RequestContextMock_SetToken_Call) Return(_a0 context.Context) *RequestContextMock_SetToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestContextMock_SetToken_Call) RunAndReturn(run func(context.Context, string) context.Context) *RequestContextMock_SetToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserID provides a mock function with given fields: ctx, userID
func (_m *RequestContextMock) SetUserID(ctx context.Context, userID string) context.Context {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for SetUserID")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// RequestContextMock_SetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserID'
type RequestContextMock_SetUserID_Call struct {
	*mock.Call
}

// SetUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *RequestContextMock_Expecter) SetUserID(ctx interface{}, userID interface{}) *RequestContextMock_SetUserID_Call {
	return &RequestContextMock_SetUserID_Call{Call: _e.mock.On("SetUserID", ctx, userID)}
}

func (_c *RequestContextMock_SetUserID_Call) Run(run func(ctx context.Context, userID string)) *RequestContextMock_SetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RequestContextMock_SetUserID_Call) Return(_a0 context.Context) *RequestContextMock_SetUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestContextMock_SetUserID_Call) RunAndReturn(run func(context.Context, string) context.Context) *RequestContextMock_SetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestContextMock creates a new instance of RequestContextMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestContextMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestContextMock {
	mock := &RequestContextMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
